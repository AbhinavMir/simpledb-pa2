## Design Decisions

### HeapPage

The code defines a HeapPage class to store data for one page of HeapFiles and implements the Page interface that is used by BufferPool.

Each HeapPage object is associated with a HeapPageId object that specifies the page's location.

The HeapPage class has two constructors. The first is used to create an empty page. The second is used to create a page from a set of bytes of data read from disk. The format of a HeapPage is a set of header bytes indicating the slots of the page that are in use, some number of tuple slots.

The HeapPage class has several methods for accessing and manipulating the data on the page. The getPageData method generates a byte array representing th contents of the page. The insertTuple and deleteTuple methods can be used to add and remove tuples from the page. The iterator method returns an Iterator over all the tuples on the page.

### HeapFile

The code above is responsible for creating a new HeapFile object. This object is used to store data in a heap file. The constructor takes in a File object and a TupleDesc object. The File object is used to store the data in the heap file. The TupleDesc object is used to describe the schema of the data that will be stored in the heap file.

### Insert And Delete

`Insert.java` inserts tuples read from the child operator into the tableId specified in the constructor.

## Aggregates
    Aggregate was rather simple as it revolved mostly around handling the merging of tuples which is not overly hard just some case handling
    depending on things such as grouping and the difference between strings and Integers when it comes to merging.

## Hash Equi Join
    This was a difficult part with the merge itself proving the hardest. I split up the loops of both children into different functions in fetchNext and loadHashMap and then
    the handling of the merge itself into one tuple was split into parseList which is called in fetchNext to give the combined tuple when called. I was slightly worried about memory
    because the datastructures holding the data ie the HashMap can get quite large and should be limited to only a subset as to not overload the main memory.  However the details of the
    assignment did not mention the cases and the tests pass so I guess its fine.

## Time spent on assignment and the difficult parts

Our main pain points were getting the IOExceptions giving us some problems w.r.t fetchNext() - spent a decent amount of time debugging that. 

No real changes where made to the API.

Collaborators
Finn Jensen and Abhinav Srivastava

We alternated between the exercises, and worked on query walkthrough together. We also worked on the writeup together and debugged this together.