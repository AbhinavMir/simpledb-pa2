package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate pred;
    private DbIterator child1;
    private DbIterator child2;
    private TupleDesc comboTD;
    private HashMap<Object, List<Tuple>> map;
    private Tuple t1;
    private Tuple t2;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.pred = p;
        this.child1 = child1;
        this.child2 = child2;

        this.comboTD = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());

        map = new HashMap<Object, List<Tuple>>();
    }

    public JoinPredicate getJoinPredicate() {
        return this.pred;
    }

    public TupleDesc getTupleDesc() {
        return this.comboTD;
    }

    public String getJoinField1Name()
    {
        TupleDesc td = this.child1.getTupleDesc();
        int fieldIndex = this.pred.getField1();
        return td.getFieldName(fieldIndex);
    }

    public String getJoinField2Name()
    {
        TupleDesc td = this.child2.getTupleDesc();
        int fieldIndex = this.pred.getField2();
        return td.getFieldName(fieldIndex);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        this.child1.open();
        this.child2.open();
        loadHashMap();
    }

    public void close() {
        this.child1.close();
        this.child2.close();
        this.map.clear();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.child1.rewind();
        this.child2.rewind();
    }

    transient Iterator<Tuple> listIt = null;

    //Loads Hashmap
    private void loadHashMap() throws DbException, TransactionAbortedException{
        map.clear();
        while(child1.hasNext()){
            t1 = child1.next();
            List<Tuple> list = map.computeIfAbsent(t1.getField(pred.getField1()), k -> new ArrayList<>());
            list.add(t1);
        }
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if(listIt != null && listIt.hasNext())
            return parseList();

        //Loop through Child 2
        while(child2.hasNext()){
            t2 = child2.next();

            //If it matches make ComboTuple and fill with values from match
            List<Tuple> tupleList = map.get(t2.getField(pred.getField2()));
            if(tupleList == null)
                continue;
            //makes listIt the match
            listIt = tupleList.iterator();

            return parseList();
        }

        //Rewind Child 2 and move to Child 1
        child2.rewind();
        if(child1.hasNext()){
            loadHashMap();
            return fetchNext();
        }
        return null;
    }

    //Parses listIt and merges next into comboTuple
    private Tuple parseList() {
        t1 = listIt.next();

        int tupleDesc1Num = t1.getTupleDesc().numFields();
        int tupleDesc2Num = t2.getTupleDesc().numFields();

        //Combine fields into Combotuple
        Tuple t = new Tuple(comboTD);
        for(int i = 0; i < tupleDesc1Num; i++)
            t.setField(i, t1.getField(i));
        for(int i = 0; i < tupleDesc2Num; i++)
            t.setField(tupleDesc1Num + i, t2.getField(i));
        return t;
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[] {this.child1, this.child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
